{"ast":null,"code":"/// <reference path=\"../typings/tsd.d.ts\" />\n'use strict';\n\nvar xregexp_1 = require('xregexp');\n\nvar value = '[-+]?(?:Infinity|[[0-9]*\\\\.?\\\\d*(?:[eE][-+]?\\\\d+)?)';\nvar mathInterval = xregexp_1.XRegExp(\"(?<leftBrace>  [\\\\(\\\\]\\\\[] )                                (?<fromValue>  \" + value + \"    )?                               (?<delimeter>  ,           )?                               (?<toValue>    \" + value + \"    )?                               (?<rightBrace> [\\\\)\\\\]\\\\[] )\", 'x');\n\nfunction parse(str) {\n  var match = xregexp_1.XRegExp.exec(str, mathInterval);\n\n  if (!match) {\n    return null;\n  }\n\n  return {\n    from: {\n      value: match.fromValue !== undefined ? +match.fromValue : -Infinity,\n      included: match.leftBrace === '['\n    },\n    to: {\n      value: match.toValue !== undefined ? +match.toValue : match.delimeter ? +Infinity : +match.fromValue,\n      included: match.rightBrace === ']'\n    }\n  };\n}\n\nfunction check(interval) {\n  if (!interval) {\n    return false;\n  }\n\n  if (interval.from.value === interval.to.value) {\n    return interval.from.included && interval.to.included;\n  }\n\n  return Math.min(interval.from.value, interval.to.value) === interval.from.value;\n}\n\nfunction entry(str) {\n  var interval = parse(str);\n\n  if (!check(interval)) {\n    return null;\n  }\n\n  return interval;\n}\n\nexports.default = entry;\n;","map":null,"metadata":{},"sourceType":"script"}