{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.MakePlural = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) s(r[o]);\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        } else {\n          return Array.from(arr);\n        }\n      }\n\n      function _toArray(arr) {\n        return Array.isArray(arr) ? arr : Array.from(arr);\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * make-plural.js -- https://github.com/eemeli/make-plural.js/\n       * Copyright (c) 2014-2016 by Eemeli Aro <eemeli@gmail.com>\n       *\n       * Permission to use, copy, modify, and/or distribute this software for any\n       * purpose with or without fee is hereby granted, provided that the above\n       * copyright notice and this permission notice appear in all copies.\n       *\n       * The software is provided \"as is\" and the author disclaims all warranties\n       * with regard to this software including all implied warranties of\n       * merchantability and fitness. In no event shall the author be liable for\n       * any special, direct, indirect, or consequential damages or any damages\n       * whatsoever resulting from loss of use, data or profits, whether in an\n       * action of contract, negligence or other tortious action, arising out of\n       * or in connection with the use or performance of this software.\n       */\n\n\n      var Parser = function () {\n        function Parser() {\n          _classCallCheck(this, Parser);\n        }\n\n        _createClass(Parser, [{\n          key: 'parse',\n          value: function parse(cond) {\n            var _this = this;\n\n            if (cond === 'i = 0 or n = 1') return 'n >= 0 && n <= 1';\n            if (cond === 'i = 0,1') return 'n >= 0 && n < 2';\n\n            if (cond === 'i = 1 and v = 0') {\n              this.v0 = 1;\n              return 'n == 1 && v0';\n            }\n\n            return cond.replace(/([tv]) (!?)= 0/g, function (m, sym, noteq) {\n              var sn = sym + '0';\n              _this[sn] = 1;\n              return noteq ? '!' + sn : sn;\n            }).replace(/\\b[fintv]\\b/g, function (m) {\n              _this[m] = 1;\n              return m;\n            }).replace(/([fin]) % (10+)/g, function (m, sym, num) {\n              var sn = sym + num;\n              _this[sn] = 1;\n              return sn;\n            }).replace(/n10+ = 0/g, 't0 && $&').replace(/(\\w+ (!?)= )([0-9.]+,[0-9.,]+)/g, function (m, se, noteq, x) {\n              if (m === 'n = 0,1') return '(n == 0 || n == 1)';\n              if (noteq) return se + x.split(',').join(' && ' + se);\n              return '(' + se + x.split(',').join(' || ' + se) + ')';\n            }).replace(/(\\w+) (!?)= ([0-9]+)\\.\\.([0-9]+)/g, function (m, sym, noteq, x0, x1) {\n              if (Number(x0) + 1 === Number(x1)) {\n                if (noteq) return sym + ' != ' + x0 + ' && ' + sym + ' != ' + x1;\n                return '(' + sym + ' == ' + x0 + ' || ' + sym + ' == ' + x1 + ')';\n              }\n\n              if (noteq) return '(' + sym + ' < ' + x0 + ' || ' + sym + ' > ' + x1 + ')';\n\n              if (sym === 'n') {\n                _this.t0 = 1;\n                return '(t0 && n >= ' + x0 + ' && n <= ' + x1 + ')';\n              }\n\n              return '(' + sym + ' >= ' + x0 + ' && ' + sym + ' <= ' + x1 + ')';\n            }).replace(/ and /g, ' && ').replace(/ or /g, ' || ').replace(/ = /g, ' == ');\n          }\n        }, {\n          key: 'vars',\n          value: function vars() {\n            var vars = [];\n            if (this.i) vars.push('i = s[0]');\n            if (this.f || this.v) vars.push(\"f = s[1] || ''\");\n            if (this.t) vars.push(\"t = (s[1] || '').replace(/0+$/, '')\");\n            if (this.v) vars.push('v = f.length');\n            if (this.v0) vars.push('v0 = !s[1]');\n            if (this.t0 || this.n10 || this.n100) vars.push('t0 = Number(s[0]) == n');\n\n            for (var k in this) {\n              if (/^.10+$/.test(k)) {\n                var k0 = k[0] === 'n' ? 't0 && s[0]' : k[0];\n                vars.push(k + ' = ' + k0 + '.slice(-' + k.substr(2).length + ')');\n              }\n            }\n\n            if (!vars.length) return '';\n            return 'var ' + [\"s = String(n).split('.')\"].concat(vars).join(', ');\n          }\n        }]);\n\n        return Parser;\n      }();\n\n      var Tests = function () {\n        function Tests(obj) {\n          _classCallCheck(this, Tests);\n\n          this.obj = obj;\n          this.ordinal = {};\n          this.cardinal = {};\n        }\n\n        _createClass(Tests, [{\n          key: 'add',\n          value: function add(type, cat, examples) {\n            this[type][cat] = examples.join(' ').replace(/^[ ,]+|[ ,…]+$/g, '').replace(/(0\\.[0-9])~(1\\.[1-9])/g, '$1 1.0 $2').split(/[ ,~…]+/);\n          }\n        }, {\n          key: 'testCond',\n          value: function testCond(n, type, expResult, fn) {\n            try {\n              var r = (fn || this.obj.fn)(n, type === 'ordinal');\n            } catch (e) {\n              r = e.toString();\n            }\n\n            if (r !== expResult) {\n              throw new Error('Locale ' + JSON.stringify(this.obj.lc) + type + ' rule self-test failed for v = ' + JSON.stringify(n) + ' (was ' + JSON.stringify(r) + ', expected ' + JSON.stringify(expResult) + ')');\n            }\n\n            return true;\n          }\n        }, {\n          key: 'testCat',\n          value: function testCat(type, cat, fn) {\n            var _this2 = this;\n\n            this[type][cat].forEach(function (n) {\n              _this2.testCond(n, type, cat, fn);\n\n              if (!/\\.0+$/.test(n)) _this2.testCond(Number(n), type, cat, fn);\n            });\n            return true;\n          }\n        }, {\n          key: 'testAll',\n          value: function testAll() {\n            for (var cat in this.cardinal) {\n              this.testCat('cardinal', cat);\n            }\n\n            for (var _cat in this.ordinal) {\n              this.testCat('ordinal', _cat);\n            }\n\n            return true;\n          }\n        }]);\n\n        return Tests;\n      }();\n\n      var MakePlural = function () {\n        function MakePlural(lc) {\n          var _ref = arguments.length <= 1 || arguments[1] === undefined ? MakePlural : arguments[1];\n\n          var cardinals = _ref.cardinals;\n          var ordinals = _ref.ordinals;\n\n          _classCallCheck(this, MakePlural);\n\n          if (!cardinals && !ordinals) throw new Error('At least one type of plural is required');\n          this.lc = lc;\n          this.categories = {\n            cardinal: [],\n            ordinal: []\n          };\n          this.parser = new Parser();\n          this.tests = new Tests(this);\n          this.fn = this.buildFunction(cardinals, ordinals);\n          this.fn._obj = this;\n          this.fn.categories = this.categories;\n\n          this.fn.test = function () {\n            return this.tests.testAll() && this.fn;\n          }.bind(this);\n\n          this.fn.toString = this.fnToString.bind(this);\n          return this.fn;\n        }\n\n        _createClass(MakePlural, [{\n          key: 'compile',\n          value: function compile(type, req) {\n            var cases = [];\n            var rules = MakePlural.rules[type][this.lc];\n\n            if (!rules) {\n              if (req) throw new Error('Locale \"' + this.lc + '\" ' + type + ' rules not found');\n              this.categories[type] = ['other'];\n              return \"'other'\";\n            }\n\n            for (var r in rules) {\n              var _rules$r$trim$split = rules[r].trim().split(/\\s*@\\w*/);\n\n              var _rules$r$trim$split2 = _toArray(_rules$r$trim$split);\n\n              var cond = _rules$r$trim$split2[0];\n\n              var examples = _rules$r$trim$split2.slice(1);\n\n              var cat = r.replace('pluralRule-count-', '');\n              if (cond) cases.push([this.parser.parse(cond), cat]);\n              this.tests.add(type, cat, examples);\n            }\n\n            this.categories[type] = cases.map(function (c) {\n              return c[1];\n            }).concat('other');\n\n            if (cases.length === 1) {\n              return '(' + cases[0][0] + ') ? \\'' + cases[0][1] + '\\' : \\'other\\'';\n            } else {\n              return [].concat(_toConsumableArray(cases.map(function (c) {\n                return '(' + c[0] + ') ? \\'' + c[1] + '\\'';\n              })), [\"'other'\"]).join('\\n      : ');\n            }\n          }\n        }, {\n          key: 'buildFunction',\n          value: function buildFunction(cardinals, ordinals) {\n            var _this3 = this;\n\n            var compile = function compile(c) {\n              return c ? (c[1] ? 'return ' : 'if (ord) return ') + _this3.compile.apply(_this3, _toConsumableArray(c)) : '';\n            },\n                fold = {\n              vars: function vars(str) {\n                return ('  ' + str + ';').replace(/(.{1,78})(,|$) ?/g, '$1$2\\n      ');\n              },\n              cond: function cond(str) {\n                return ('  ' + str + ';').replace(/(.{1,78}) (\\|\\| |$) ?/gm, '$1\\n          $2');\n              }\n            },\n                cond = [ordinals && ['ordinal', !cardinals], cardinals && ['cardinal', true]].map(compile).map(fold.cond),\n                body = [fold.vars(this.parser.vars())].concat(_toConsumableArray(cond)).filter(function (line) {\n              return !/^[\\s;]*$/.test(line);\n            }).map(function (line) {\n              return line.replace(/\\s+$/gm, '');\n            }).join('\\n'),\n                args = ordinals && cardinals ? 'n, ord' : 'n';\n\n            return new Function(args, body);\n          }\n        }, {\n          key: 'fnToString',\n          value: function fnToString(name) {\n            return Function.prototype.toString.call(this.fn).replace(/^function( \\w+)?/, name ? 'function ' + name : 'function').replace('\\n/**/', '');\n          }\n        }], [{\n          key: 'load',\n          value: function load() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            args.forEach(function (cldr) {\n              var data = cldr && cldr.supplemental || null;\n              if (!data) throw new Error('Data does not appear to be CLDR data');\n              MakePlural.rules = {\n                cardinal: data['plurals-type-cardinal'] || MakePlural.rules.cardinal,\n                ordinal: data['plurals-type-ordinal'] || MakePlural.rules.ordinal\n              };\n            });\n            return MakePlural;\n          }\n        }]);\n\n        return MakePlural;\n      }();\n\n      exports.default = MakePlural;\n      MakePlural.cardinals = true;\n      MakePlural.ordinals = false;\n      MakePlural.rules = {\n        cardinal: {},\n        ordinal: {}\n      };\n      module.exports = exports['default'];\n    }, {}]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}